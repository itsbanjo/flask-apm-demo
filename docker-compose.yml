services:
  frontend-flask:
    build: 
      context: ./frontend-flask
      dockerfile: Dockerfile
    ports:
      - "5001:5001"
    environment:
      - BACKEND_SERVICE_URL=http://backend:5002
      - ELASTIC_APM_SERVER_URL=${ELASTIC_APM_SERVER_URL}
      - ELASTIC_APM_SECRET_TOKEN=${ELASTIC_APM_SECRET_TOKEN}
      - ELASTIC_APM_SERVICE_NAME=frontend-flask
    volumes:
      - frontend-flask:/var/log/
    depends_on:
      - backend
    networks:
      - app-network


  frontend-otel:
    build:
      context: ./frontend-otel
      dockerfile: Dockerfile
    ports:
      - "5005:5005"
    environment:
      - BACKEND_SERVICE_URL=http://backend:5002
      - OTEL_EXPORTER_OTLP_ENDPOINT=${ELASTIC_APM_SERVER_URL}
      - OTEL_EXPORTER_OTLP_HEADERS=Authorization=Bearer%20${ELASTIC_APM_SECRET_TOKEN}
      - OTEL_SERVICE_NAME=frontend-otel
      - OTEL_RESOURCE_ATTRIBUTES=deployment.environment=production
    volumes:
      - frontend-otel:/var/log/
    depends_on:
      - backend
    networks:
      - app-network

  frontend-nodejs:
    build: 
      context: ./frontend-nodejs
      dockerfile: Dockerfile
    ports:
      - "5004:5004"
    environment:
      - BACKEND_SERVICE_URL=http://backend:5002
      - ELASTIC_APM_SERVER_URL=${ELASTIC_APM_SERVER_URL}
      - ELASTIC_APM_SECRET_TOKEN=${ELASTIC_APM_SECRET_TOKEN}
      - ELASTIC_APM_SERVICE_NAME=frontend-nodejs
    volumes:
      - frontend-nodejs:/var/log/
    depends_on:
      - backend
    networks:
      - app-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "5002:5002"
    environment:
      - DATABASE_SERVICE_URL=http://database:5003
      - ELASTIC_APM_SERVER_URL=${ELASTIC_APM_SERVER_URL}
      - ELASTIC_APM_SECRET_TOKEN=${ELASTIC_APM_SECRET_TOKEN}
      - ELASTIC_APM_SERVICE_NAME=backend
    volumes:
      - backend:/var/log/
    depends_on:
      - database
    networks:
      - app-network

  database:
    build:
      context: ./database
      dockerfile: Dockerfile
    ports:
      - "5003:5003"
    environment:
      - ELASTIC_APM_SERVER_URL=${ELASTIC_APM_SERVER_URL}
      - ELASTIC_APM_SECRET_TOKEN=${ELASTIC_APM_SECRET_TOKEN}
      - ELASTIC_APM_SERVICE_NAME=database
      - DATABASE_URL=postgresql://user:password@postgres:5432/inventory
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: inventory
    volumes:
      - postgres_data:/var/lib/postgresql/data

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d inventory"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  locust:
    build:
      context: ./locust
      dockerfile: Dockerfile
    ports:
      - "8089:8089"
    volumes:
      - ./locust:/mnt/locust
    command: -f /mnt/locust/locustfile.py --host http://nginx
    networks:
      - app-network

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - frontend-flask
      - frontend-nodejs
    volumes:
      - nginx-logs:/demo/
    networks:
      - app-network

  elastic-agent:
    image: docker.elastic.co/elastic-agent/elastic-agent:8.15.2
    user: root
    environment:
      - FLEET_ENROLL=1
      - FLEET_INSECURE=false
      - FLEET_URL=${FLEET_URL}
      - FLEET_ENROLLMENT_TOKEN=${FLEET_ENROLLMENT_TOKEN}

    volumes:
      - nginx-logs:/var/log/nginx  # Same volume to access NGINX logs
      - frontend-flask:/var/log/frontend-flask
      - frontend-nodejs:/var/log/frontend-nodejs
      - backend:/var/log/backend
      - /var/run/docker.sock:/var/run/docker.sock

    networks:
      - app-network

volumes:
  postgres_data:
  elasticsearch_data:
  nginx-logs:
  frontend-flask:
  frontend-nodejs:
  frontend-otel:
  backend:
networks:
  app-network:
    driver: bridge
